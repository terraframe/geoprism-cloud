
- name: Ensure the webserver can connect to the database
  wait_for: host="{{webserver_database}}" port=5432 delay=0 timeout=10 state=started

- name: Stop Tomcat
  shell: "docker stop geoprism"
  become: yes
  become_method: sudo
  ignore_errors: yes

## Appcfg ##
- name: Stage appcfg
  copy: src="{{appcfg}}/"
        dest="{{app_data}}/tomcat/appcfg/"
  become: yes
  become_method: sudo
  when: appcfg is defined
  
## SSL ##
- name: Stage SSL certificates
  file:
    path: "{{app_data}}/ssl"
    state: directory
    mode: 0700
    owner: "{{ansible_user}}"
    recurse: yes
  become: yes
  become_method: sudo
- name: Delete server.xml
  file:
    path: "{{app_data}}/ssl/server.xml"
    state: absent
  become: yes
  become_method: sudo
- name: Copy server.xml
  copy:
    src: "server.xml"
    dest: "{{app_data}}/ssl/server.xml"
  become: yes
  become_method: sudo
- name: Inject password into server.xml
  ansible.builtin.replace:
    path: "{{app_data}}/ssl/server.xml"
    regexp: "keystorePass=\"changeit\""
    replace: "keystorePass=\"{{ssl_keystore_password}}\""
  become: yes
  become_method: sudo
- name: Copy web.xml
  copy:
    src: "web.xml"
    dest: "{{app_data}}/ssl/web.xml"
  become: yes
  become_method: sudo

## Configure log4j2.xml ##
- name: Stage log4j2.xml
  copy: src="log4j2.xml"
        dest="{{app_data}}/tomcat/log4j2.xml"
  become: yes
  become_method: sudo
- name: Set log level based on ansible config
  ansible.builtin.replace:
    path: "{{app_data}}/tomcat/log4j2.xml"
    regexp: '<Root level="{{log_level | default("error")}}">'
    replace: '<Root level="error">'
  become: yes
  become_method: sudo

- name: Does the geoserver data directory exist already?
  stat: "path={{app_data}}/geoserver/data/gwc"
  register: geoserver_data_exists
  become: yes
  become_method: sudo
- name: Copy default geoserver data to geoserver data directory
  shell: "{{item}}"
  with_items:
    - wget -nv -O {{app_data}}/geoserver-tmp/geoserver.war "https://dl.cloudsmith.io/public/terraframe/public/maven/org/geoserver/geoserver/{{geoserver_version}}/geoserver-{{geoserver_version}}.war"
    - mkdir -p {{app_data}}/geoserver-tmp/unzipped && cd {{app_data}}/geoserver-tmp/unzipped && unzip {{app_data}}/geoserver-tmp/geoserver.war && mv data {{app_data}}/geoserver
  become: yes
  become_method: sudo
  when: "not geoserver_data_exists.stat.exists"
- name: Set the Geoserver admin password
  community.general.xml:
    path: "{{app_data}}/geoserver/data/security/usergroup/default/users.xml"
    namespaces:
      geo: http://www.geoserver.org/security/users
    xpath: /geo:userRegistry/geo:users/geo:user[@name='admin']
    attribute: password
    value: "{{geoserver_encrypted_admin_password}}"
  become: yes
  become_method: sudo
  when: geoserver_encrypted_admin_password is defined

# Fetch and Load Docker Image (As Zip From Jenkins) ##
- name: Delete existing docker image since the load command won't overwrite it
  community.docker.docker_image:
    state: absent
    name: "{{webserver_docker_image}}:{{webserver_docker_image_tag}}"
    force_absent: true
  become: yes
  become_method: sudo
- name: Fetch and Load Docker Image (As Zip From Jenkins)
  file:
    path: "{{app_data}}/dimg"
    state: directory
    mode: 0700
    owner: "{{ansible_user}}"
    recurse: yes
  become: yes
  become_method: sudo
  #when: webserver_docker_image_tag == "latest"
- name: Fetch and Load Docker Image (As Zip From Jenkins)
  ansible.builtin.copy:
    src: "{{docker_image_path}}"
    dest: "{{app_data}}/dimg/geoprism.dimg.gz"
  become: yes
  become_method: sudo
  #when: webserver_docker_image_tag == "latest"
- name: Fetch and Load Docker Image (As Zip From Jenkins)
  community.docker.docker_image:
    state: present
    source: load
    timeout: 120
    load_path: "{{app_data}}/dimg/geoprism.dimg.gz"
    name: "{{webserver_docker_image}}:{{webserver_docker_image_tag}}"
  become: yes
  become_method: sudo
  #when: webserver_docker_image_tag == "latest"

## Delete temp files ##
- name: Delete Tomcat Temp Files
  shell: "rm -rf {{app_data}}/tomcat/tmp/*"
  become: yes
  become_method: sudo
  
# Port redirects
- name: Forward port (iptables)
  shell: "/sbin/iptables -t nat -I PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8443 && /sbin/iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 && /sbin/service iptables save"
  become: yes
  become_method: sudo
  when: "firewalld is not defined"
- name: Forward port (firewallcmd)
  shell: "firewall-cmd --permanent --add-forward-port=port=443:proto=tcp:toport=8443 && firewall-cmd --permanent --add-forward-port=port=80:proto=tcp:toport=8080 && firewall-cmd --reload"
  become: yes
  become_method: sudo
  when: "firewalld is defined"
  
- name: Figure out which JAVA_OPTS to use
  ansible.builtin.set_fact:
    java_opts: "{{java_opts_prod | trim}}"
  when: "not {{debug | default('false')}}"
- name: Figure out which JAVA_OPTS to use
  ansible.builtin.set_fact:
    java_opts: "{{java_opts_debug | trim}}"
  when: "{{debug | default('false')}}"

#- ansible.builtin.set_fact:
#    should_pull: true
#  when: webserver_docker_image_tag != "latest"
- ansible.builtin.set_fact:
    should_pull: false
  #when: webserver_docker_image_tag == "latest"

- name: Fetch and Load Docker Image (As Zip From Jenkins)
  ansible.builtin.copy:
    src: "{{geoprism_lib_extension}}"
    dest: "{{app_data}}/tomcat/geoprism-extension.jar"
  become: yes
  become_method: sudo
  when: geoprism_lib_extension is defined and geoprism_lib_extension|length > 0
- ansible.builtin.set_fact:
    geoprism_app_volumes: "{{ geoprism_app_volumes + ['{{app_data}}/tomcat/geoprism-extension.jar:{{catalina_home}}/webapps/ROOT/WEB-INF/lib/geoprism-extension.jar'] }}"
  when: geoprism_lib_extension is defined and geoprism_lib_extension|length > 0

## Build Database ##
# export JAVA_OPTS="-Xms512M -Xmx8000M -Ddatabase.hostURL=127.0.0.1 -Dappcfg=/usr/local/tomcat/appcfg -Dproject.basedir=/usr/local/tomcat -Dtomcat.home=/usr/local/tomcat -Ddatabase.user=georegistry -Ddatabase.password=519xvLBDIG -Ddatabase.port=5432 -Dorientdb.root.password=e3SptZ38a6s -Dorientdb.admin.password=wo4oXM01a"
# dev server clean install with extension:
# sudo -E docker run --rm --name geoprism-database-builder -e JAVA_OPTS="$JAVA_OPTS" --network=host -v "/data/tomcat/geoprism-extension.jar:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib/geoprism-extension.jar" -v "/data/tomcat/logs:/usr/local/tomcat/logs" -v "/data/tomcat/appcfg:/usr/local/tomcat/appcfg:ro" -v "/data/tomcat/log4j2.xml:/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/log4j2.xml:ro" terraframe/geoprism-registry:latest java $JAVA_OPTS -cp /usr/local/tomcat/webapps/ROOT/WEB-INF/classes:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib/* net.geoprism.build.GeoprismDatabaseBuilder /usr/local/tomcat/webapps/ROOT/WEB-INF/classes/metadata --rootUser=postgres --rootPass=yk6ID7jkh --templateDb=postgres --install=true --clean=true 2>&1
# Dev server patch no extension
# sudo -E docker run --rm --name geoprism-database-builder -e JAVA_OPTS="$JAVA_OPTS" --network=host -v "/data/tomcat/logs:/usr/local/tomcat/logs" -v "/data/tomcat/appcfg:/usr/local/tomcat/appcfg:ro" -v "/data/tomcat/log4j2.xml:/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/log4j2.xml:ro" terraframe/geoprism-registry:latest java $JAVA_OPTS -cp /usr/local/tomcat/webapps/ROOT/WEB-INF/classes:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib/* net.geoprism.build.GeoprismDatabaseBuilder /usr/local/tomcat/webapps/ROOT/WEB-INF/classes/metadata --rootUser=postgres --rootPass=yk6ID7jkh --templateDb=postgres --install=false --clean=false 2>&1
- name: Build Database
  block:
    - name: Build Database
      community.general.docker_container:
        name: geoprism
        image: "{{webserver_docker_image}}:{{webserver_docker_image_tag}}"
        state: started
        pull: "{{should_pull}}"
        restart_policy: 'no'
        auto_remove: no
        detach: no
        env: 'JAVA_OPTS="{{java_opts}}"'
        network_mode: host
        command: "java {{java_opts}} -cp {{catalina_home}}/webapps/ROOT/WEB-INF/classes:{{catalina_home}}/webapps/ROOT/WEB-INF/lib/* net.geoprism.build.GeoprismDatabaseBuilder {{catalina_home}}/webapps/ROOT/WEB-INF/classes/metadata --rootUser={{rootdb_user}} --rootPass={{rootdb_pass}} --templateDb=postgres --install={{clean_db}} --clean={{clean_db}} --patch={{not clean_db}} 2>&1 | tee {{app_data}}/tomcat/logs/database-builder.log"
        volumes: "{{geoprism_app_volumes}}"
      become: yes
      become_method: sudo
  rescue:
    - command: cat {{app_data}}/tomcat/logs/app.log
      register: command_output
    - debug:
        msg: "{{command_output.stdout}}"
    - shell: "docker logs geoprism"
    - ansible.builtin.command: /bin/false

## Start the Geoprism Docker container ##
- name: Start Tomcat Webserver
  community.general.docker_container:
    name: geoprism
    image: "{{webserver_docker_image}}:{{webserver_docker_image_tag}}"
    state: started
    recreate: yes
    force_kill: yes
    pull: "{{should_pull}}"
    restart_policy: always
    env: 'JAVA_OPTS="{{java_opts}}"'
    network_mode: host
    volumes: "{{geoprism_app_volumes}}"
  become: yes
  become_method: sudo
  