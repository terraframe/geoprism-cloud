
- name: Ensure the webserver can connect to the database
  wait_for: host="{{webserver_database}}" port=5432 delay=0 timeout=10 state=started

- name: Stop Tomcat
  shell: "docker stop geoprism"
  become: yes
  become_method: sudo
  ignore_errors: yes

## Appcfg ##
- name: Stage appcfg
  copy: src="{{appcfg}}/"
        dest="{{app_data}}/tomcat/appcfg/"
  become: yes
  become_method: sudo
  when: appcfg is defined
  
## SSL ##
- name: Stage SSL certificates
  file:
    path: "{{app_data}}/ssl"
    state: directory
    mode: 0700
    owner: "{{ansible_user}}"
    recurse: yes
  become: yes
  become_method: sudo
- name: Delete server.xml
  file:
    path: "{{app_data}}/ssl/server.xml"
    state: absent
  become: yes
  become_method: sudo
- name: Stage SSL certificates
  copy:
    src: "server.xml"
    dest: "{{app_data}}/ssl/server.xml"
  become: yes
  become_method: sudo
- name: Inject password into server.xml
  ansible.builtin.replace:
    path: "{{app_data}}/ssl/server.xml"
    regexp: "keystorePass=\"changeit\""
    replace: "keystorePass=\"{{ssl_keystore_password}}\""
  become: yes
  become_method: sudo

## Configure log4j2.xml ##
- name: Stage log4j2.xml
  copy: src="log4j2.xml"
        dest="{{app_data}}/tomcat/log4j2.xml"
  become: yes
  become_method: sudo
- name: Set log level based on ansible config
  ansible.builtin.replace:
    path: "{{app_data}}/tomcat/log4j2.xml"
    regexp: '<Root level="{{log_level | default("error")}}">'
    replace: '<Root level="error">'

- name: Does the geoserver data directory exist already?
  stat: "path={{app_data}}/geoserver/data/gwc"
  register: geoserver_data_exists
  become: yes
  become_method: sudo
- name: Copy default geoserver data to geoserver data directory
  shell: "{{item}}"
  with_items:
    - wget -nv -O {{app_data}}/geoserver-tmp/geoserver.war "http://nexus.terraframe.com/service/local/repositories/allrepos/content/org/geoserver/geoserver/{{geoserver_version}}/geoserver-{{geoserver_version}}.war"
    - mkdir -p {{app_data}}/geoserver-tmp/unzipped && cd {{app_data}}/geoserver-tmp/unzipped && unzip {{app_data}}/geoserver-tmp/geoserver.war && mv data {{app_data}}/geoserver
  become: yes
  become_method: sudo
  when: "not geoserver_data_exists.stat.exists"

# Fetch and Load Docker Image (As Zip From Jenkins) ##
- name: Delete existing docker image since the load command won't overwrite it
  community.docker.docker_image:
    state: absent
    name: "{{webserver_docker_image}}:{{webserver_docker_image_tag}}"
    force_absent: true
  become: yes
  become_method: sudo
- name: Fetch and Load Docker Image (As Zip From Jenkins)
  file:
    path: "{{app_data}}/dimg"
    state: directory
    mode: 0700
    owner: "{{ansible_user}}"
    recurse: yes
  become: yes
  become_method: sudo
  #when: webserver_docker_image_tag == "latest"
- name: Fetch and Load Docker Image (As Zip From Jenkins)
  copy:
    src: "{{docker_image_path}}"
    dest: "{{app_data}}/dimg/georegistry.dimg.gz"
  become: yes
  become_method: sudo
  #when: webserver_docker_image_tag == "latest"
- name: Fetch and Load Docker Image (As Zip From Jenkins)
  community.docker.docker_image:
    state: present
    source: load
    load_path: "{{app_data}}/dimg/georegistry.dimg.gz"
    name: "{{webserver_docker_image}}:{{webserver_docker_image_tag}}"
  become: yes
  become_method: sudo
  #when: webserver_docker_image_tag == "latest"

## Delete temp files ##
- name: Delete Tomcat Temp Files
  shell: "rm -rf {{app_data}}/tomcat/tmp/*"
  become: yes
  become_method: sudo
  
# Port redirects
- name: Forward port (iptables)
  shell: "/sbin/iptables -t nat -I PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 8443 && /sbin/iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080 && /sbin/service iptables save"
  become: yes
  become_method: sudo
  when: "firewalld is not defined"
- name: Forward port (firewallcmd)
  shell: "firewall-cmd --permanent --add-forward-port=port=443:proto=tcp:toport=8443 && firewall-cmd --permanent --add-forward-port=port=80:proto=tcp:toport=8080 && firewall-cmd --reload"
  become: yes
  become_method: sudo
  when: "firewalld is defined"
  
- name: Figure out which JAVA_OPTS to use
  ansible.builtin.set_fact:
    java_opts: "{{java_opts_prod | trim}}"
  when: "not {{debug | default('false')}}"
- name: Figure out which JAVA_OPTS to use
  ansible.builtin.set_fact:
    java_opts: "{{java_opts_debug | trim}}"
  when: "{{debug | default('false')}}"

#- ansible.builtin.set_fact:
#    should_pull: true
#  when: webserver_docker_image_tag != "latest"
- ansible.builtin.set_fact:
    should_pull: false
  #when: webserver_docker_image_tag == "latest"

## Build Database ##
- name: Build Database
  community.general.docker_container:
    name: geoprism
    image: "{{webserver_docker_image}}:{{webserver_docker_image_tag}}"
    state: started
    pull: "{{should_pull}}"
    restart_policy: 'no'
    auto_remove: no
    detach: no
    env: 'JAVA_OPTS="{{java_opts}}"'
    network_mode: host
    command: "java {{java_opts}} -cp {{catalina_home}}/webapps/ROOT/WEB-INF/classes:{{catalina_home}}/webapps/ROOT/WEB-INF/lib/* net.geoprism.build.GeoprismDatabaseBuilder {{catalina_home}}/webapps/ROOT/WEB-INF/classes/metadata --rootUser={{rootdb_user}} --rootPass={{rootdb_pass}} --templateDb=postgres --install={{clean_db}} --clean={{clean_db}} 2>&1 | tee {{catalina_home}}/logs/database-builder.log"
    volumes:
        - "{{app_data}}/geoprism:/data/geoprism"
        - "{{app_data}}/tomcat/logs:{{catalina_home}}/logs"
        - "{{app_data}}/tomcat/tmp:{{catalina_home}}/temp"
        - "{{app_data}}/tomcat/webapps/.well-known:{{catalina_home}}/webapps/.well-known"
        - "{{app_data}}/tomcat/appcfg:{{catalina_home}}/appcfg"
        - "{{app_data}}/tomcat/log4j2.xml:{{catalina_home}}/webapps/ROOT/WEB-INF/classes/log4j2.xml"
        - "{{app_data}}/geoserver:/data/geoserver"
        - "{{app_data}}/ssl/keystore.jks:{{catalina_home}}/conf/geoprism.ks"
        - "{{app_data}}/ssl/server.xml:{{catalina_home}}/conf/server.xml"
  become: yes
  become_method: sudo

## Start the Geoprism Docker container ##
- name: Start Tomcat Webserver
  community.general.docker_container:
    name: geoprism
    image: "{{webserver_docker_image}}:{{webserver_docker_image_tag}}"
    state: started
    recreate: yes
    force_kill: yes
    pull: "{{should_pull}}"
    restart_policy: always
    env: 'JAVA_OPTS="{{java_opts}}"'
    network_mode: host
    volumes:
        - "{{app_data}}/geoprism:/data/geoprism"
        - "{{app_data}}/tomcat/logs:{{catalina_home}}/logs"
        - "{{app_data}}/tomcat/tmp:{{catalina_home}}/temp"
        - "{{app_data}}/tomcat/webapps/.well-known:{{catalina_home}}/webapps/.well-known"
        - "{{app_data}}/tomcat/appcfg:{{catalina_home}}/appcfg"
        - "{{app_data}}/tomcat/log4j2.xml:{{catalina_home}}/webapps/ROOT/WEB-INF/classes/log4j2.xml"
        - "{{app_data}}/geoserver:/data/geoserver"
        - "{{app_data}}/ssl/keystore.jks:{{catalina_home}}/conf/geoprism.ks"
        - "{{app_data}}/ssl/server.xml:{{catalina_home}}/conf/server.xml"
  become: yes
  become_method: sudo
  