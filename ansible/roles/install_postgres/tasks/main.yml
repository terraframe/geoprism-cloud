
# Our job is to SSH into the database server, install docker and a postgres image
# This script is useful for when we're not using amazon RDS but just a bare bones server

# Thinking about upgrading? 9.5 -> 9.6 requires a data migration https://github.com/janLo/postgres-docker-upgrade

# Delete any existing volumes if we're doing a clean
- name: Stop Postgres Docker
  community.general.docker_container:
    name: postgres
    state: stopped
  become: yes
  become_method: sudo
  when: "{{clean_db | default(false)}}"
  ignore_errors: yes # This command may fail on new installs when postgres doesn't exist
- name: Delete Data
  file:
    state: absent
    path: "{{app_data}}/postgres/data"
  become: yes
  become_method: sudo
  when: "{{clean_db | default(false)}}"

# Move existing data over to {app_data}
- name: Does the new docker volume exist already?
  stat: "path={{app_data}}/postgres"
  register: new_volume_exists
  become: yes
  become_method: sudo
- name: Does the old docker volume exist?
  stat: "path=/docker/volumes/postgresql"
  register: old_volume_exists
  become: yes
  become_method: sudo
- name: Stop Postgres
  community.general.docker_container:
    name: postgres
    state: stopped
  become: yes
  become_method: sudo
  when: "not new_volume_exists.stat.exists and old_volume_exists.stat.exists"
- name: Create docker volume directory
  file:
    state: directory
    path: "{{app_data}}/postgres"
  become: yes
  become_method: sudo
- name: Copy volume to docker volume vault
  shell: "cp -a /docker/volumes/postgresql/. {{app_data}}/postgres/"
  when: "not new_volume_exists.stat.exists and old_volume_exists.stat.exists"
  become: yes
  become_method: sudo
- name: Delete Old Data
  file:
    state: absent
    path: "/docker/volumes/postgresql"
  become: yes
  become_method: sudo
  when: "not new_volume_exists.stat.exists and old_volume_exists.stat.exists"

- name: Start Postgres Docker
  community.general.docker_container:
    name: postgres
    image: "{{ db_image | default('mdillon/postgis:9.5') }}"
    state: started
    recreate: "{{clean_db}}"
    pull: true
    env:
      POSTGRES_PASSWORD: "{{rootdb_pass}}"
    exposed_ports:
      - 5432
    ports:
      - "{{ db_port | default(5432) }}:5432"
    restart_policy: always
    volumes:
      - "{{app_data}}/postgres/data:/var/lib/postgresql/data"
  become: yes
  become_method: sudo
  
# When we're recreating the docker image for some reason docker leaves the old volume just sitting around unused. This was causing us to run out of space after x number of deploys
# https://lebkowski.name/docker-volumes/
- name: Clean dangling docker volumes
  shell: "docker volume rm $(docker volume ls -qf dangling=true)"
  become: yes
  become_method: sudo
  when: "{{clean_db}}"
  ignore_errors: yes


# - name: Open port 5432 on iptables
#   iptables: 
# iptables -A INPUT -p tcp --dport 2195 -j ACCEPT
# service iptables restart